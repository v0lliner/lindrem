{"ast":null,"code":"var _jsxFileName = \"/Users/volli-fred/www/lindrem-frontend/src/i18nContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useMemo } from 'react';\n// Import translation resources. These JSON files live alongside this context\n// and are loaded statically at build time. Each language has its own folder\n// containing one file per page plus a layout file for shared strings.\nimport fiHome from './translations/fi/home.json';\nimport fiInWork from './translations/fi/inWork.json';\nimport fiReferences from './translations/fi/references.json';\nimport fiContact from './translations/fi/contact.json';\nimport fiLayout from './translations/fi/layout.json';\nimport etHome from './translations/et/home.json';\nimport etContact from './translations/et/contact.json';\nimport etLayout from './translations/et/layout.json';\n\n// Consolidate all translations into a nested object keyed by language.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst translations = {\n  fi: {\n    home: fiHome,\n    inWork: fiInWork,\n    references: fiReferences,\n    contact: fiContact,\n    layout: fiLayout\n  },\n  et: {\n    home: etHome,\n    contact: etContact,\n    layout: etLayout\n  }\n};\n\n// Create the context. It stores the current language and exposes a\n// translation function for retrieving strings. See useTranslation below.\nconst TranslationContext = /*#__PURE__*/createContext({\n  language: 'fi',\n  setLanguage: () => {}\n});\n\n/**\n * TranslationProvider wraps the application and provides language state.\n * It reads the initial language from the current URL segment (/fi or /et) and\n * stores it in state. Changing the language will also update the pathname.\n */\nexport function TranslationProvider({\n  children\n}) {\n  _s();\n  // Derive initial language from the URL. If no lang code is found, default\n  // to 'fi'. This allows bookmarking pages directly in a given language.\n  const pathLang = window.location.pathname.split('/')[1];\n  const initialLang = ['fi', 'et'].includes(pathLang) ? pathLang : 'fi';\n  const [language, setLanguage] = useState(initialLang);\n\n  // When the language changes, update the URL path prefix. This ensures that\n  // navigation remains consistent with the selected language. Only replace\n  // the language segment; the remainder of the path stays intact.\n  const changeLanguage = lang => {\n    if (lang === language) return;\n    const parts = window.location.pathname.split('/');\n    parts[1] = lang;\n    const newPath = parts.join('/') || `/${lang}`;\n    window.history.pushState({}, '', newPath);\n    setLanguage(lang);\n  };\n  const value = useMemo(() => ({\n    language,\n    changeLanguage\n  }), [language]);\n  return /*#__PURE__*/_jsxDEV(TranslationContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n\n/**\n * Custom hook to access translation strings. Pass the page key (e.g.\n * 'home', 'references', 'contact', 'layout') and receive a function that\n * returns the translation for a given key. If the key is missing, the\n * function returns the key itself to aid debugging.\n */\n_s(TranslationProvider, \"ZjOmNGssZa4qvl4eazEKae4szzk=\");\n_c = TranslationProvider;\nexport function useTranslation(page) {\n  _s2();\n  const {\n    language\n  } = useContext(TranslationContext);\n  return key => {\n    var _translations$languag, _pageTranslations$key;\n    const pageTranslations = ((_translations$languag = translations[language]) === null || _translations$languag === void 0 ? void 0 : _translations$languag[page]) || {};\n    return (_pageTranslations$key = pageTranslations[key]) !== null && _pageTranslations$key !== void 0 ? _pageTranslations$key : key;\n  };\n}\n\n/**\n * Hook to get and set the current language. Components such as the\n * language switcher can call setLanguage to toggle between Finnish and\n * Estonian. The returned language value is always one of the supported\n * language codes.\n */\n_s2(useTranslation, \"RMsR/EeEL9bXO6Sj4sW9UN9/2EQ=\");\nexport function useLanguage() {\n  _s3();\n  const {\n    language,\n    changeLanguage\n  } = useContext(TranslationContext);\n  return {\n    language,\n    changeLanguage\n  };\n}\n_s3(useLanguage, \"dU1YT4SEUBjeT669zq4GPH1sjFA=\");\nvar _c;\n$RefreshReg$(_c, \"TranslationProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useMemo","fiHome","fiInWork","fiReferences","fiContact","fiLayout","etHome","etContact","etLayout","jsxDEV","_jsxDEV","translations","fi","home","inWork","references","contact","layout","et","TranslationContext","language","setLanguage","TranslationProvider","children","_s","pathLang","window","location","pathname","split","initialLang","includes","changeLanguage","lang","parts","newPath","join","history","pushState","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTranslation","page","_s2","key","_translations$languag","_pageTranslations$key","pageTranslations","useLanguage","_s3","$RefreshReg$"],"sources":["/Users/volli-fred/www/lindrem-frontend/src/i18nContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useMemo } from 'react';\n// Import translation resources. These JSON files live alongside this context\n// and are loaded statically at build time. Each language has its own folder\n// containing one file per page plus a layout file for shared strings.\nimport fiHome from './translations/fi/home.json';\nimport fiInWork from './translations/fi/inWork.json';\nimport fiReferences from './translations/fi/references.json';\nimport fiContact from './translations/fi/contact.json';\nimport fiLayout from './translations/fi/layout.json';\n\nimport etHome from './translations/et/home.json';\nimport etContact from './translations/et/contact.json';\nimport etLayout from './translations/et/layout.json';\n\n// Consolidate all translations into a nested object keyed by language.\nconst translations = {\n  fi: {\n    home: fiHome,\n    inWork: fiInWork,\n    references: fiReferences,\n    contact: fiContact,\n    layout: fiLayout,\n  },\n  et: {\n    home: etHome,\n    contact: etContact,\n    layout: etLayout,\n  },\n};\n\n// Create the context. It stores the current language and exposes a\n// translation function for retrieving strings. See useTranslation below.\nconst TranslationContext = createContext({\n  language: 'fi',\n  setLanguage: () => {},\n});\n\n/**\n * TranslationProvider wraps the application and provides language state.\n * It reads the initial language from the current URL segment (/fi or /et) and\n * stores it in state. Changing the language will also update the pathname.\n */\nexport function TranslationProvider({ children }) {\n  // Derive initial language from the URL. If no lang code is found, default\n  // to 'fi'. This allows bookmarking pages directly in a given language.\n  const pathLang = window.location.pathname.split('/')[1];\n  const initialLang = ['fi', 'et'].includes(pathLang) ? pathLang : 'fi';\n  const [language, setLanguage] = useState(initialLang);\n\n  // When the language changes, update the URL path prefix. This ensures that\n  // navigation remains consistent with the selected language. Only replace\n  // the language segment; the remainder of the path stays intact.\n  const changeLanguage = (lang) => {\n    if (lang === language) return;\n    const parts = window.location.pathname.split('/');\n    parts[1] = lang;\n    const newPath = parts.join('/') || `/${lang}`;\n    window.history.pushState({}, '', newPath);\n    setLanguage(lang);\n  };\n\n  const value = useMemo(() => ({ language, changeLanguage }), [language]);\n\n  return (\n    <TranslationContext.Provider value={value}>{children}</TranslationContext.Provider>\n  );\n}\n\n/**\n * Custom hook to access translation strings. Pass the page key (e.g.\n * 'home', 'references', 'contact', 'layout') and receive a function that\n * returns the translation for a given key. If the key is missing, the\n * function returns the key itself to aid debugging.\n */\nexport function useTranslation(page) {\n  const { language } = useContext(TranslationContext);\n  return (key) => {\n    const pageTranslations = translations[language]?.[page] || {};\n    return pageTranslations[key] ?? key;\n  };\n}\n\n/**\n * Hook to get and set the current language. Components such as the\n * language switcher can call setLanguage to toggle between Finnish and\n * Estonian. The returned language value is always one of the supported\n * language codes.\n */\nexport function useLanguage() {\n  const { language, changeLanguage } = useContext(TranslationContext);\n  return { language, changeLanguage };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}